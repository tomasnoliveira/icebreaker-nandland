
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3855 (git sha1 261383d, clang 11.0.1 -fPIC -Os)


-- Parsing `project4.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: project4.v
Parsing Verilog input from `project4.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

-- Parsing `debounce_filter.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: debounce_filter.v
Parsing Verilog input from `debounce_filter.v' to AST representation.
Generating RTLIL representation for module `\debounce_filter'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json project4.json' --

3. Executing SYNTH_ICE40 pass.

3.1. Executing Verilog-2005 frontend: /home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

3.2. Executing HIERARCHY pass (managing design hierarchy).

3.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \debounce_filter

3.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \debounce_filter
Removed 0 unused modules.

3.3. Executing PROC pass (convert processes to netlists).

3.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1330$256 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1274$249 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1199$245 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1143$238 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1074$235 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1026$232 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:957$229 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:909$226 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:753$218 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:697$211 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:622$207 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:566$200 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:497$197 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:449$194 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:380$191 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:332$188 in module SB_DFFSR.
Marked 2 switch rules as full_case in process $proc$debounce_filter.v:12$8 in module debounce_filter.
Removed a total of 0 dead cases.

3.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 9 redundant assignments.
Promoted 27 assignments to connections.

3.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$259'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$255'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$248'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$244'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$237'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$234'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$231'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$228'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$225'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$223'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$221'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$217'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$210'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$206'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$199'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$196'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$193'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$190'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$187'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$185'.
  Set init value: \Q = 1'0
Found init rule in `\debounce_filter.$proc$debounce_filter.v:10$15'.
  Set init value: \r_State = 1'0
Found init rule in `\debounce_filter.$proc$debounce_filter.v:9$14'.
  Set init value: \r_Count = 18'000000000000000000
Found init rule in `\top.$proc$project4.v:8$7'.
  Set init value: \r_BTN1 = 1'0
Found init rule in `\top.$proc$project4.v:7$6'.
  Set init value: \r_LED1 = 1'0

3.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1330$256'.
Found async reset \R in `\SB_DFFNER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1199$245'.
Found async reset \S in `\SB_DFFNS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1074$235'.
Found async reset \R in `\SB_DFFNR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:957$229'.
Found async reset \S in `\SB_DFFES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:753$218'.
Found async reset \R in `\SB_DFFER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:622$207'.
Found async reset \S in `\SB_DFFS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:497$197'.
Found async reset \R in `\SB_DFFR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:380$191'.

3.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$259'.
Creating decoders for process `\SB_DFFNES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1330$256'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$255'.
Creating decoders for process `\SB_DFFNESS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1274$249'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$248'.
Creating decoders for process `\SB_DFFNER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1199$245'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$244'.
Creating decoders for process `\SB_DFFNESR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1143$238'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$237'.
Creating decoders for process `\SB_DFFNS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1074$235'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$234'.
Creating decoders for process `\SB_DFFNSS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1026$232'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$231'.
Creating decoders for process `\SB_DFFNR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:957$229'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$228'.
Creating decoders for process `\SB_DFFNSR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:909$226'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$225'.
Creating decoders for process `\SB_DFFNE.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:866$224'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$223'.
Creating decoders for process `\SB_DFFN.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:830$222'.
Creating decoders for process `\SB_DFFES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$221'.
Creating decoders for process `\SB_DFFES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:753$218'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$217'.
Creating decoders for process `\SB_DFFESS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:697$211'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$210'.
Creating decoders for process `\SB_DFFER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:622$207'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$206'.
Creating decoders for process `\SB_DFFESR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:566$200'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$199'.
Creating decoders for process `\SB_DFFS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:497$197'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$196'.
Creating decoders for process `\SB_DFFSS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:449$194'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$193'.
Creating decoders for process `\SB_DFFR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:380$191'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$190'.
Creating decoders for process `\SB_DFFSR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:332$188'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$187'.
Creating decoders for process `\SB_DFFE.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:289$186'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$185'.
Creating decoders for process `\SB_DFF.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:253$184'.
Creating decoders for process `\debounce_filter.$proc$debounce_filter.v:10$15'.
Creating decoders for process `\debounce_filter.$proc$debounce_filter.v:9$14'.
Creating decoders for process `\debounce_filter.$proc$debounce_filter.v:12$8'.
     1/2: $0\r_Count[17:0]
     2/2: $0\r_State[0:0]
Creating decoders for process `\top.$proc$project4.v:8$7'.
Creating decoders for process `\top.$proc$project4.v:7$6'.
Creating decoders for process `\top.$proc$project4.v:16$1'.
     1/1: $0\r_LED1[0:0]

3.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1330$256'.
  created $adff cell `$procdff$453' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1274$249'.
  created $dff cell `$procdff$454' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1199$245'.
  created $adff cell `$procdff$455' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1143$238'.
  created $dff cell `$procdff$456' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1074$235'.
  created $adff cell `$procdff$457' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1026$232'.
  created $dff cell `$procdff$458' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:957$229'.
  created $adff cell `$procdff$459' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:909$226'.
  created $dff cell `$procdff$460' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:866$224'.
  created $dff cell `$procdff$461' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:830$222'.
  created $dff cell `$procdff$462' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:753$218'.
  created $adff cell `$procdff$463' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:697$211'.
  created $dff cell `$procdff$464' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:622$207'.
  created $adff cell `$procdff$465' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:566$200'.
  created $dff cell `$procdff$466' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:497$197'.
  created $adff cell `$procdff$467' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:449$194'.
  created $dff cell `$procdff$468' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:380$191'.
  created $adff cell `$procdff$469' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:332$188'.
  created $dff cell `$procdff$470' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:289$186'.
  created $dff cell `$procdff$471' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:253$184'.
  created $dff cell `$procdff$472' with positive edge clock.
Creating register for signal `\debounce_filter.\r_Count' using process `\debounce_filter.$proc$debounce_filter.v:12$8'.
  created $dff cell `$procdff$473' with positive edge clock.
Creating register for signal `\debounce_filter.\r_State' using process `\debounce_filter.$proc$debounce_filter.v:12$8'.
  created $dff cell `$procdff$474' with positive edge clock.
Creating register for signal `\top.\r_LED1' using process `\top.$proc$project4.v:16$1'.
  created $dff cell `$procdff$475' with positive edge clock.
Creating register for signal `\top.\r_BTN1' using process `\top.$proc$project4.v:16$1'.
  created $dff cell `$procdff$476' with positive edge clock.

3.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$259'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1330$256'.
Removing empty process `SB_DFFNES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1330$256'.
Removing empty process `SB_DFFNESS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$255'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1274$249'.
Removing empty process `SB_DFFNESS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1274$249'.
Removing empty process `SB_DFFNER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$248'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1199$245'.
Removing empty process `SB_DFFNER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1199$245'.
Removing empty process `SB_DFFNESR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$244'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1143$238'.
Removing empty process `SB_DFFNESR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1143$238'.
Removing empty process `SB_DFFNS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$237'.
Removing empty process `SB_DFFNS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1074$235'.
Removing empty process `SB_DFFNSS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$234'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1026$232'.
Removing empty process `SB_DFFNSS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:1026$232'.
Removing empty process `SB_DFFNR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$231'.
Removing empty process `SB_DFFNR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:957$229'.
Removing empty process `SB_DFFNSR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$228'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:909$226'.
Removing empty process `SB_DFFNSR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:909$226'.
Removing empty process `SB_DFFNE.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$225'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:866$224'.
Removing empty process `SB_DFFNE.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:866$224'.
Removing empty process `SB_DFFN.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$223'.
Removing empty process `SB_DFFN.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:830$222'.
Removing empty process `SB_DFFES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$221'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:753$218'.
Removing empty process `SB_DFFES.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:753$218'.
Removing empty process `SB_DFFESS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$217'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:697$211'.
Removing empty process `SB_DFFESS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:697$211'.
Removing empty process `SB_DFFER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$210'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:622$207'.
Removing empty process `SB_DFFER.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:622$207'.
Removing empty process `SB_DFFESR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$206'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:566$200'.
Removing empty process `SB_DFFESR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:566$200'.
Removing empty process `SB_DFFS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$199'.
Removing empty process `SB_DFFS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:497$197'.
Removing empty process `SB_DFFSS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$196'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:449$194'.
Removing empty process `SB_DFFSS.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:449$194'.
Removing empty process `SB_DFFR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$193'.
Removing empty process `SB_DFFR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:380$191'.
Removing empty process `SB_DFFSR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$190'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:332$188'.
Removing empty process `SB_DFFSR.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:332$188'.
Removing empty process `SB_DFFE.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$187'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:289$186'.
Removing empty process `SB_DFFE.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:289$186'.
Removing empty process `SB_DFF.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:0$185'.
Removing empty process `SB_DFF.$proc$/home/tomas/.local/bin/../share/yosys/ice40/cells_sim.v:253$184'.
Removing empty process `debounce_filter.$proc$debounce_filter.v:10$15'.
Removing empty process `debounce_filter.$proc$debounce_filter.v:9$14'.
Found and cleaned up 2 empty switches in `\debounce_filter.$proc$debounce_filter.v:12$8'.
Removing empty process `debounce_filter.$proc$debounce_filter.v:12$8'.
Removing empty process `top.$proc$project4.v:8$7'.
Removing empty process `top.$proc$project4.v:7$6'.
Found and cleaned up 1 empty switch in `\top.$proc$project4.v:16$1'.
Removing empty process `top.$proc$project4.v:16$1'.
Cleaned up 21 empty switches.

3.4. Executing FLATTEN pass (flatten design).
Deleting now unused module debounce_filter.
<suppressed ~1 debug messages>

3.5. Executing TRIBUF pass.

3.6. Executing DEMINOUT pass (demote inout ports to input or output).

3.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

3.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 13 unused wires.
<suppressed ~1 debug messages>

3.9. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.10.6. Executing OPT_DFF pass (perform DFF optimizations).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$475 ($dff) from module top (D = $not$project4.v:21$5_Y, Q = \r_LED1).
Adding EN signal on $flatten\debounce_inst.$procdff$474 ($dff) from module top (D = \BTN1, Q = \debounce_inst.r_State).
Adding SRST signal on $flatten\debounce_inst.$procdff$473 ($dff) from module top (D = $flatten\debounce_inst.$add$debounce_filter.v:14$12_Y [17:0], Q = \debounce_inst.r_Count, rval = 18'000000000000000000).

3.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

3.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.12.9. Rerunning OPT passes. (Maybe there is more to do..)

3.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.12.13. Executing OPT_DFF pass (perform DFF optimizations).

3.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.12.16. Finished OPT passes. (There is nothing left to do.)

3.13. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 18) from port B of cell top.$flatten\debounce_inst.$eq$debounce_filter.v:16$13 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_inst.$add$debounce_filter.v:14$12 ($add).
Removed top 14 bits (of 32) from port Y of cell top.$flatten\debounce_inst.$add$debounce_filter.v:14$12 ($add).
Removed top 15 bits (of 32) from port B of cell top.$flatten\debounce_inst.$lt$debounce_filter.v:13$10 ($lt).
Removed top 14 bits (of 32) from wire top.$flatten\debounce_inst.$add$debounce_filter.v:14$12_Y.

3.14. Executing PEEPOPT pass (run peephole optimizers).

3.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.16. Executing SHARE pass (SAT-based resource sharing).

3.17. Executing TECHMAP pass (map to technology primitives).

3.17.1. Executing Verilog-2005 frontend: /home/tomas/.local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/tomas/.local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~36 debug messages>

3.18. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.20. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $flatten\debounce_inst.$add$debounce_filter.v:14$12 ($add).
  creating $alu model for $macc $flatten\debounce_inst.$add$debounce_filter.v:14$12.
  creating $alu model for $flatten\debounce_inst.$lt$debounce_filter.v:13$10 ($lt): new $alu
  creating $alu model for $flatten\debounce_inst.$eq$debounce_filter.v:16$13 ($eq): merged with $flatten\debounce_inst.$lt$debounce_filter.v:13$10.
  creating $alu cell for $flatten\debounce_inst.$lt$debounce_filter.v:13$10, $flatten\debounce_inst.$eq$debounce_filter.v:16$13: $auto$alumacc.cc:485:replace_alu$486
  creating $alu cell for $flatten\debounce_inst.$add$debounce_filter.v:14$12: $auto$alumacc.cc:485:replace_alu$497
  created 2 $alu and 0 $macc cells.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New input vector for $reduce_and cell $auto$opt_dff.cc:243:make_patterns_logic$481: { $auto$rtlil.cc:2121:Not$479 $auto$alumacc.cc:501:replace_alu$487 }
  Optimizing cells in module \top.
Performed a total of 1 changes.

3.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.21.6. Executing OPT_DFF pass (perform DFF optimizations).

3.21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.21.9. Rerunning OPT passes. (Maybe there is more to do..)

3.21.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.21.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.21.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.21.13. Executing OPT_DFF pass (perform DFF optimizations).

3.21.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.21.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.21.16. Finished OPT passes. (There is nothing left to do.)

3.22. Executing MEMORY pass.

3.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /home/tomas/.local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/tomas/.local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

3.25.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

3.26. Executing ICE40_BRAMINIT pass.

3.27. Executing OPT pass (performing simple optimizations).

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.27.3. Executing OPT_DFF pass (perform DFF optimizations).

3.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.27.5. Finished fast OPT passes.

3.28. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.29. Executing OPT pass (performing simple optimizations).

3.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.29.6. Executing OPT_DFF pass (perform DFF optimizations).

3.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.29.9. Finished OPT passes. (There is nothing left to do.)

3.30. Executing ICE40_WRAPCARRY pass (wrap carries).

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /home/tomas/.local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/tomas/.local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Executing Verilog-2005 frontend: /home/tomas/.local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/tomas/.local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

3.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using extmapper simplemap for cells of type $nex.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=17\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~132 debug messages>

3.32. Executing OPT pass (performing simple optimizations).

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~79 debug messages>

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~105 debug messages>
Removed a total of 35 cells.

3.32.3. Executing OPT_DFF pass (perform DFF optimizations).

3.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 46 unused wires.
<suppressed ~1 debug messages>

3.32.5. Finished fast OPT passes.

3.33. Executing ICE40_OPT pass (performing simple optimizations).

3.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$486.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$486.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$497.slice[0].carry: CO=\debounce_inst.r_Count [0]

3.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.33.4. Executing OPT_DFF pass (perform DFF optimizations).

3.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 0 unused wires.
<suppressed ~1 debug messages>

3.33.6. Rerunning OPT passes. (Removed registers in this run.)

3.33.7. Running ICE40 specific optimizations.

3.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.33.10. Executing OPT_DFF pass (perform DFF optimizations).

3.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.33.12. Finished OPT passes. (There is nothing left to do.)

3.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

3.35. Executing TECHMAP pass (map to technology primitives).

3.35.1. Executing Verilog-2005 frontend: /home/tomas/.local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/tomas/.local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.35.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~43 debug messages>

3.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$497.slice[0].carry ($lut).

3.38. Executing ICE40_OPT pass (performing simple optimizations).

3.38.1. Running ICE40 specific optimizations.

3.38.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~14 debug messages>

3.38.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~57 debug messages>
Removed a total of 19 cells.

3.38.4. Executing OPT_DFF pass (perform DFF optimizations).

3.38.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 126 unused wires.
<suppressed ~1 debug messages>

3.38.6. Rerunning OPT passes. (Removed registers in this run.)

3.38.7. Running ICE40 specific optimizations.

3.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.38.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.38.10. Executing OPT_DFF pass (perform DFF optimizations).

3.38.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.38.12. Finished OPT passes. (There is nothing left to do.)

3.39. Executing TECHMAP pass (map to technology primitives).

3.39.1. Executing Verilog-2005 frontend: /home/tomas/.local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/tomas/.local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

3.39.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.40. Executing ABC pass (technology mapping using ABC).

3.40.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 46 gates and 69 wires to a netlist network with 23 inputs and 22 outputs.

3.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      22.
ABC: Participating nodes from both networks       =      43.
ABC: Participating nodes from the first network   =      21. (  70.00 % of nodes)
ABC: Participating nodes from the second network  =      22. (  73.33 % of nodes)
ABC: Node pairs (any polarity)                    =      21. (  70.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =      21. (  70.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

3.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       29
ABC RESULTS:        internal signals:       24
ABC RESULTS:           input signals:       23
ABC RESULTS:          output signals:       22
Removing temp directory.

3.41. Executing ICE40_WRAPCARRY pass (wrap carries).

3.42. Executing TECHMAP pass (map to technology primitives).

3.42.1. Executing Verilog-2005 frontend: /home/tomas/.local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/tomas/.local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.42.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 18 unused cells and 58 unused wires.

3.43. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       46
  1-LUT               19
  2-LUT               19
  3-LUT                4
  4-LUT                4

Eliminating LUTs.
Number of LUTs:       46
  1-LUT               19
  2-LUT               19
  3-LUT                4
  4-LUT                4

Combining LUTs.
Number of LUTs:       46
  1-LUT               19
  2-LUT               19
  3-LUT                4
  4-LUT                4

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~141 debug messages>

3.44. Executing TECHMAP pass (map to technology primitives).

3.44.1. Executing Verilog-2005 frontend: /home/tomas/.local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/tomas/.local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

3.44.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
No more expansions possible.
<suppressed ~179 debug messages>
Removed 0 unused cells and 96 unused wires.

3.45. Executing AUTONAME pass.
Renamed 729 objects in module top (13 iterations).
<suppressed ~112 debug messages>

3.46. Executing HIERARCHY pass (managing design hierarchy).

3.46.1. Analyzing design hierarchy..
Top module:  \top

3.46.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

3.47. Printing statistics.

=== top ===

   Number of wires:                 23
   Number of wire bits:            131
   Number of public wires:          23
   Number of public wire bits:     131
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                100
     SB_CARRY                       33
     SB_DFF                          1
     SB_DFFE                         2
     SB_DFFSR                       18
     SB_LUT4                        46

3.48. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3.49. Executing JSON backend.

End of script. Logfile hash: 7ec827f80d, CPU: user 0.30s system 0.02s, MEM: 56.70 MB peak
Yosys 0.9+3855 (git sha1 261383d, clang 11.0.1 -fPIC -Os)
Time spent: 32% 12x read_verilog (0 sec), 21% 1x abc (0 sec), ...
